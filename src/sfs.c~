/*
  Simple File System

  This code is derived from function prototypes found /usr/include/fuse/fuse.h
  Copyright (C) 2001-2007  Miklos Szeredi <miklos@szeredi.hu>
  His code is licensed under the LGPLv2.

*/

#include "params.h"
#include "block.h"

#include <ctype.h>
#include <dirent.h>
#include <errno.h>
#include <fcntl.h>
#include <fuse.h>
#include <libgen.h>
#include <limits.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <math.h>
#include <stdbool.h>
#include <string.h>
#include <time.h>

#ifdef HAVE_SYS_XATTR_H
#include <sys/xattr.h>
#endif

#include "log.h"


///////////////////////////////////////////////////////////
//
// Prototypes for all these functions, and the C-style comments,
// come indirectly from /usr/include/fuse.h
//

/**
 * Initialize filesystem
 *
 * The return value will passed in the private_data field of
 * fuse_context to all file operations and as a parameter to the
 * destroy() method.
 *
 * Introduced in version 2.3
 * Changed in version 2.6
 */
#define SUPERBLOCK_START 0
#define NO_OF_BLOCKS 20000
    
typedef struct
    {
     long driveSize; // size of drive
     long freeBlocks; // no of free blocks available for users
     bool blockStatus [NO_OF_BLOCKS]; // isFree - true if free, false otherwise 
     int iNodeBlocksStart; //Block no from where iNode's begin
     int noOfInodeBlocks;  //no of contiguous blocks which contains iNode
     int noOfFreeInodes;   // Number of free inodes
     unsigned int creationTime;  // Time of creation of the superblock
     unsigned int lastUpdatedTime;  // Time when superblock was last updated
    } superBlock;


#define NO_OF_DIRECT_POINTERS 10
#define NO_OF_SINGLE_INDIRECTION_POINTERS 5
#define NO_OF_DOUBLE_INDIRECTION_POINTERS 3
#define MAX_FILE_NAME_SIZE 64 
#define NO_OF_INODE_BLOCKS 1000	
#define INODES_PER_BLOCK (int)floor(BLOCK_SIZE/sizeof(iNode))
#define NO_OF_POINTERS_IN_INDIRECT_BLOCKS (int)floor(BLOCK_SIZE/sizeof(long))
#define DIRECTORY 1
#define FILE 0

    
 typedef struct
    {
     long inodeNo; // Unique identification number of each inode
     int type;     // 0 for file, 1 for directory inode.. macros
     char name[MAX_FILE_NAME_SIZE];  // Name of the file/directory
     int userID;   // Owner of the file/directory
     long totalSize;  // Size of the file/directory
     long noOfBlocks;     // Number of blocks allocated to the file
     bool inUse;          // Status of inode
     long dataBlockNos[NO_OF_DIRECT_POINTERS]; // block numbers in case of files, inode numbers in case of directories
     long singleIndirectionPointers[NO_OF_SINGLE_INDIRECTION_POINTERS];
     long doubleIndirectionPointers[NO_OF_DOUBLE_INDIRECTION_POINTERS];
     unsigned int  creationTime;   // Time of creation of the file/directory
     unsigned int  lastUpdatedTime;  // Time of last updation of file/directory
     unsigned int  lastAccessedTime; // Time when file/directory was last accessed
    } iNode;
 

    typedef struct
    {
       long pointers[NO_OF_POINTERS_IN_INDIRECT_BLOCKS]; 
    } indirectBlock;




int read_inode(int inodeNo, iNode* inode);
int write_inode(int inodeNo, iNode* inode);
int read_superblock(superBlock* superblock);
int write_superblock(superBlock* superblock);
int get_free_block();
int set_free_block(int blockNo);
int get_free_inode();
int path_to_inode(const char* path,iNode *inode,  bool getParent,iNode *parent);
//int set_free_inode();
//FOR TESTING
void print_inode(inode);
void print_superblock()
{
char *test;
test = calloc (1,BLOCK_SIZE);

block_read (0,(void *)test);

log_msg("\nprint superBlock() - creationTime %d\n", ((superBlock *)test)->creationTime);
//fprintf(stderr, "\n superblock \n", ((superBlock *)test)->creationTime);

}

int blockwrite(int blockNo, long offset,const void *data,long sizeOfData)
{
	//if(sizeOfData<BLOCK_SIZE)
		char *writeBuffer = calloc (1,BLOCK_SIZE);
	//else
		//char *writeBuffer = data;
        long counter1;
	
	for (counter1=0;counter1<sizeOfData;counter1++)
		writeBuffer[offset+counter1] = *((char*)data + counter1);
	int returnvalue = block_write(blockNo,(void *)writeBuffer);
	free (writeBuffer);
	return returnvalue;
}

int blockread(int blockNo, long offset,const void *data,long sizeOfData);

void *sfs_init(struct fuse_conn_info *conn)
{
    fprintf(stderr, "in bb-init\n");
    log_msg("\nsfs_init()\n");
    log_conn(conn);
    log_fuse_context(fuse_get_context());
    superBlock *superblock;
    iNode *rootInode;

    int counter1=0;
    //block_write(NO_OF_BLOCKS,(void *)writeBuffer);
    //for (counter1=0;counter1<NO_OF_BLOCKS;counter1++)
    	//block_write(counter1,(void *)writeBuffer);
    //create and initialize superblock
    superblock = calloc (1, sizeof(superBlock));
    superblock -> driveSize = NO_OF_BLOCKS * BLOCK_SIZE;
    superblock -> noOfInodeBlocks = NO_OF_INODE_BLOCKS;
    superblock -> freeBlocks = NO_OF_BLOCKS - (int)ceil(sizeof(superblock)/BLOCK_SIZE) - superblock -> noOfInodeBlocks;
    for (counter1 = 0;counter1<(NO_OF_BLOCKS-superblock -> freeBlocks) ;counter1++)    
	superblock -> blockStatus[counter1] = true;
    for (;counter1<NO_OF_BLOCKS;counter1++)
	superblock -> blockStatus[counter1] = false;
    superblock -> iNodeBlocksStart = (int)ceil(sizeof(superblock)/BLOCK_SIZE);
    superblock -> noOfFreeInodes = (INODES_PER_BLOCK*NO_OF_INODE_BLOCKS)- 1;

    struct fuse_context *fuseContext = fuse_get_context();
    rootInode = calloc (1, sizeof(iNode));
    rootInode -> inodeNo = 0;
    rootInode -> type = DIRECTORY;
    strcpy (rootInode -> name,"root");
    rootInode -> userID=fuseContext -> uid;
    rootInode -> totalSize = sizeof(iNode);
    rootInode -> noOfBlocks=0;
    rootInode -> inUse = 1;
    for (counter1=0;counter1<NO_OF_DIRECT_POINTERS;counter1++)
    	rootInode -> dataBlockNos[NO_OF_DIRECT_POINTERS]=-1;
    for (counter1=0;counter1<NO_OF_SINGLE_INDIRECTION_POINTERS;counter1++)
    	rootInode -> singleIndirectionPointers[NO_OF_SINGLE_INDIRECTION_POINTERS]=-1;
    for (counter1=0;counter1<NO_OF_DOUBLE_INDIRECTION_POINTERS;counter1++)
    	rootInode -> doubleIndirectionPointers[NO_OF_DOUBLE_INDIRECTION_POINTERS]=-1;
    rootInode -> creationTime= time(NULL);
    rootInode -> lastUpdatedTime= rootInode -> creationTime;
    rootInode -> lastAccessedTime= rootInode -> creationTime;
    superblock -> creationTime= rootInode -> creationTime;
    superblock -> lastUpdatedTime= rootInode -> creationTime;
    write_superblock(superblock);
    write_inode(0,rootInode);
    //print_superBlock();
    return SFS_DATA;
}

/**
 * Clean up filesystem
 *
 * Called on filesystem exit.
 *
 * Introduced in version 2.3
 */
void sfs_destroy(void *userdata)
{
    log_msg("\nsfs_destroy(userdata=0x%08x)\n", userdata);
}

/** Get file attributes.
 *
 * Similar to stat().  The 'st_dev' and 'st_blksize' fields are
 * ignored.  The 'st_ino' field is ignored except if the 'use_ino'
 * mount option is given.
 */
int sfs_getattr(const char *path, struct stat *statbuf)
{
    int retstat = 0;
    char fpath[PATH_MAX];
    
    log_msg("\nsfs_getattr(path=\"%s\", statbuf=0x%08x)\n",
	  path, statbuf);
    
    return retstat;
}

/**
 * Create and open a file
 *
 * If the file does not exist, first create it with the specified
 * mode, and then open it.
 *
 * If this method is not implemented or under Linux kernel
 * versions earlier than 2.6.15, the mknod() and open() methods
 * will be called instead.
 *
 * Introduced in version 2.5
 */
int sfs_create(const char *path, mode_t mode, struct fuse_file_info *fi)
{
    int retstat = 0;
    log_msg("\nsfs_create(path=\"%s\", mode=0%03o, fi=0x%08x)\n",
	    path, mode, fi);
    
    
    return retstat;
}

/** Remove a file */
int sfs_unlink(const char *path)
{
    int retstat = 0;
    log_msg("sfs_unlink(path=\"%s\")\n", path);
    long counter1,counter2,counter3;
    iNode *fileInode, *parentInode;
    fileInode = calloc(1,sizeof(iNode));
    parentInode = calloc(1,sizeof(iNode));
    path_to_inode(path,fileInode,true, parentInode);
    indirectBlock *
    // free all data blocks of fileInode and mark them as free on superblock bitmap
    for (counter1=0;counter1<NO_OF_DIRECT_POINTERS;counter1++)
	if (fileInode->dataBlockNos[counter1] != -1)	
		{
		set_block_free(fileInode->dataBlockNos[counter1] );
		fileInode->dataBlockNos[counter1] = -1;
		}
    for (counter1=0;counter1<NO_OF_SINGLE_INDIRECTION_POINTERS;counter1++)
	{
	for (counter2=0; counter2 < (long)floor(BLOCK_SIZE/sizeof(long)); counter2++)
;
	}
    singleIndirectionPointers[NO_OF_SINGLE_INDIRECTION_POINTERS];
    doubleIndirectionPointers[NO_OF_DOUBLE_INDIRECTION_POINTERS];
    // mark the inode to be free in hard disk and associated superblock updates
    // find the link to file in parent iNode and mark as -1 ie pointing to nothing 
    // and write the parent inode to disk
    
    free (parentInode);
    free (fileInode);
    return retstat;
}

/** File open operation
 *
 * No creation, or truncation flags (O_CREAT, O_EXCL, O_TRUNC)
 * will be passed to open().  Open should check if the operation
 * is permitted for the given flags.  Optionally open may also
 * return an arbitrary filehandle in the fuse_file_info structure,
 * which will be passed to all file operations.
 *
 * Changed in version 2.2
 */
int sfs_open(const char *path, struct fuse_file_info *fi)
{
    int retstat = 0;
    log_msg("\nsfs_open(path\"%s\", fi=0x%08x)\n",
	    path, fi);

    
    return retstat;
}

/** Release an open file
 *
 * Release is called when there are no more references to an open
 * file: all file descriptors are closed and all memory mappings
 * are unmapped.
 *
 * For every open() call there will be exactly one release() call
 * with the same flags and file descriptor.  It is possible to
 * have a file opened more than once, in which case only the last
 * release will mean, that no more reads/writes will happen on the
 * file.  The return value of release is ignored.
 *
 * Changed in version 2.2
 */
int sfs_release(const char *path, struct fuse_file_info *fi)
{
    int retstat = 0;
    log_msg("\nsfs_release(path=\"%s\", fi=0x%08x)\n",
	  path, fi);
    

    return retstat;
}

/** Read data from an open file
 *
 * Read should return exactly the number of bytes requested except
 * on EOF or error, otherwise the rest of the data will be
 * substituted with zeroes.  An exception to this is when the
 * 'direct_io' mount option is specified, in which case the return
 * value of the read system call will reflect the return value of
 * this operation.
 *
 * Changed in version 2.2
 */
int sfs_read(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi)
{
    int retstat = 0;
    log_msg("\nsfs_read(path=\"%s\", buf=0x%08x, size=%d, offset=%lld, fi=0x%08x)\n",
	    path, buf, size, offset, fi);

   
    return retstat;
}

/** Write data to an open file
 *
 * Write should return exactly the number of bytes requested
 * except on error.  An exception to this is when the 'direct_io'
 * mount option is specified (see read operation).
 *
 * Changed in version 2.2
 */
int sfs_write(const char *path, const char *buf, size_t size, off_t offset,
	     struct fuse_file_info *fi)
{
    int retstat = 0;
    log_msg("\nsfs_write(path=\"%s\", buf=0x%08x, size=%d, offset=%lld, fi=0x%08x)\n",
	    path, buf, size, offset, fi);
    
    
    return retstat;
}


/** Create a directory */
int sfs_mkdir(const char *path, mode_t mode)
{
    int retstat = 0;
    log_msg("\nsfs_mkdir(path=\"%s\", mode=0%3o)\n",
	    path, mode);
   
    
    return retstat;
}


/** Remove a directory */
int sfs_rmdir(const char *path)
{
    int retstat = 0;
    log_msg("sfs_rmdir(path=\"%s\")\n",
	    path);
    
    
    return retstat;
}


/** Open directory
 *
 * This method should check if the open operation is permitted for
 * this  directory
 *
 * Introduced in version 2.3
 */
int sfs_opendir(const char *path, struct fuse_file_info *fi)
{
    int retstat = 0;
    log_msg("\nsfs_opendir(path=\"%s\", fi=0x%08x)\n",
	  path, fi);
    
    
    return retstat;
}

/** Read directory
 *
 * This supersedes the old getdir() interface.  New applications
 * should use this.
 *
 * The filesystem may choose between two modes of operation:
 *
 * 1) The readdir implementation ignores the offset parameter, and
 * passes zero to the filler function's offset.  The filler
 * function will not return '1' (unless an error happens), so the
 * whole directory is read in a single readdir operation.  This
 * works just like the old getdir() method.
 *
 * 2) The readdir implementation keeps track of the offsets of the
 * directory entries.  It uses the offset parameter and always
 * passes non-zero offset to the filler function.  When the buffer
 * is full (or an error happens) the filler function will return
 * '1'.
 *
 * Introduced in version 2.3
 */
int sfs_readdir(const char *path, void *buf, fuse_fill_dir_t filler, off_t offset,
	       struct fuse_file_info *fi)
{
    int retstat = 0;
    
    
    return retstat;
}

/** Release directory
 *
 * Introduced in version 2.3
 */
int sfs_releasedir(const char *path, struct fuse_file_info *fi)
{
    int retstat = 0;

    
    return retstat;
}

struct fuse_operations sfs_oper = {
  .init = sfs_init,
  .destroy = sfs_destroy,

  .getattr = sfs_getattr,
  .create = sfs_create,
  .unlink = sfs_unlink,
  .open = sfs_open,
  .release = sfs_release,
  .read = sfs_read,
  .write = sfs_write,

  .rmdir = sfs_rmdir,
  .mkdir = sfs_mkdir,

  .opendir = sfs_opendir,
  .readdir = sfs_readdir,
  .releasedir = sfs_releasedir
};

void sfs_usage()
{
    fprintf(stderr, "usage:  sfs [FUSE and mount options] diskFile mountPoint\n");
    abort();
}

int main(int argc, char *argv[])
{
    int fuse_stat;
    struct sfs_state *sfs_data;
    
    // sanity checking on the command line
    if ((argc < 3) || (argv[argc-2][0] == '-') || (argv[argc-1][0] == '-'))
	sfs_usage();

    sfs_data = malloc(sizeof(struct sfs_state));
    if (sfs_data == NULL) {
	perror("main calloc");
	abort();
    }
	
    // Pull the diskfile and save it in internal data
    sfs_data->diskfile = argv[argc-2];
    argv[argc-2] = argv[argc-1];
    argv[argc-1] = NULL;
    argc--;
    disk_open(sfs_data->diskfile);
    sfs_data->logfile = log_open();
    
    // turn over control to fuse
    fprintf(stderr, "about to call fuse_main, %s \n", sfs_data->diskfile);
    fuse_stat = fuse_main(argc, argv, &sfs_oper, sfs_data);
    fprintf(stderr, "fuse_main returned %d\n", fuse_stat);
    disk_close();
    
    return fuse_stat;
}
